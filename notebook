{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "0c89f90a",
   "metadata": {
    "_cell_guid": "b1076dfc-b9ad-4769-8c92-a6c4dae69d19",
    "_uuid": "8f2839f25d086af736a60e9eeb907d3b93b6e0e5",
    "execution": {
     "iopub.execute_input": "2025-02-06T19:32:45.095774Z",
     "iopub.status.busy": "2025-02-06T19:32:45.095255Z",
     "iopub.status.idle": "2025-02-06T19:32:46.167225Z",
     "shell.execute_reply": "2025-02-06T19:32:46.165249Z"
    },
    "papermill": {
     "duration": 1.079339,
     "end_time": "2025-02-06T19:32:46.169497",
     "exception": false,
     "start_time": "2025-02-06T19:32:45.090158",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "/kaggle/input/coursera-free-courses-dataset/coursera.csv\n",
      "/kaggle/input/udemy-course-dataset-categories-ratings-and-trends/udemy_courses.csv\n",
      "/kaggle/input/edx-courses-dataset-2021/EdX.csv\n",
      "/kaggle/input/dataset-of-1200-coursera-courses/edx.csv\n",
      "/kaggle/input/dataset-of-1200-coursera-courses/Barkeley_extension.csv\n",
      "/kaggle/input/dataset-of-1200-coursera-courses/Oxford.csv\n",
      "/kaggle/input/dataset-of-1200-coursera-courses/Stanford.csv\n",
      "/kaggle/input/dataset-of-1200-coursera-courses/udacity.csv\n",
      "/kaggle/input/dataset-of-1200-coursera-courses/alison.csv\n",
      "/kaggle/input/dataset-of-1200-coursera-courses/MIT ocw.csv\n",
      "/kaggle/input/dataset-of-1200-coursera-courses/london school of economics.csv\n",
      "/kaggle/input/dataset-of-1200-coursera-courses/coursera_update.csv\n",
      "/kaggle/input/dataset-of-1200-coursera-courses/pluralsight.csv\n",
      "/kaggle/input/dataset-of-1200-coursera-courses/futurelearn.csv\n",
      "/kaggle/input/dataset-of-1200-coursera-courses/swayam.csv\n",
      "/kaggle/input/dataset-of-1200-coursera-courses/Harvard_university.csv\n"
     ]
    }
   ],
   "source": [
    "# This Python 3 environment comes with many helpful analytics libraries installed\n",
    "# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n",
    "# For example, here's several helpful packages to load\n",
    "\n",
    "import numpy as np # linear algebra\n",
    "import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n",
    "\n",
    "# Input data files are available in the read-only \"../input/\" directory\n",
    "# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n",
    "\n",
    "import os\n",
    "for dirname, _, filenames in os.walk('/kaggle/input'):\n",
    "    for filename in filenames:\n",
    "        print(os.path.join(dirname, filename))\n",
    "\n",
    "# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n",
    "# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "3dd4d64c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-02-06T19:32:46.178504Z",
     "iopub.status.busy": "2025-02-06T19:32:46.177984Z",
     "iopub.status.idle": "2025-02-06T19:33:00.763844Z",
     "shell.execute_reply": "2025-02-06T19:33:00.762326Z"
    },
    "papermill": {
     "duration": 14.592286,
     "end_time": "2025-02-06T19:33:00.765987",
     "exception": false,
     "start_time": "2025-02-06T19:32:46.173701",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "nltk                               3.2.4\r\n",
      "Collecting kaleido\r\n",
      "  Downloading kaleido-0.2.1-py2.py3-none-manylinux1_x86_64.whl.metadata (15 kB)\r\n",
      "Downloading kaleido-0.2.1-py2.py3-none-manylinux1_x86_64.whl (79.9 MB)\r\n",
      "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m79.9/79.9 MB\u001b[0m \u001b[31m17.3 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\r\n",
      "\u001b[?25hInstalling collected packages: kaleido\r\n",
      "Successfully installed kaleido-0.2.1\r\n",
      "[nltk_data] Downloading package punkt to /usr/share/nltk_data...\n",
      "[nltk_data]   Package punkt is already up-to-date!\n",
      "[nltk_data] Downloading package wordnet to /usr/share/nltk_data...\n",
      "[nltk_data]   Package wordnet is already up-to-date!\n",
      "Archive:  /usr/share/nltk_data/corpora/wordnet.zip\r\n",
      "   creating: /usr/share/nltk_data/corpora/wordnet/\r\n",
      "  inflating: /usr/share/nltk_data/corpora/wordnet/lexnames  \r\n",
      "  inflating: /usr/share/nltk_data/corpora/wordnet/data.verb  \r\n",
      "  inflating: /usr/share/nltk_data/corpora/wordnet/index.adv  \r\n",
      "  inflating: /usr/share/nltk_data/corpora/wordnet/adv.exc  \r\n",
      "  inflating: /usr/share/nltk_data/corpora/wordnet/index.verb  \r\n",
      "  inflating: /usr/share/nltk_data/corpora/wordnet/cntlist.rev  \r\n",
      "  inflating: /usr/share/nltk_data/corpora/wordnet/data.adj  \r\n",
      "  inflating: /usr/share/nltk_data/corpora/wordnet/index.adj  \r\n",
      "  inflating: /usr/share/nltk_data/corpora/wordnet/LICENSE  \r\n",
      "  inflating: /usr/share/nltk_data/corpora/wordnet/citation.bib  \r\n",
      "  inflating: /usr/share/nltk_data/corpora/wordnet/noun.exc  \r\n",
      "  inflating: /usr/share/nltk_data/corpora/wordnet/verb.exc  \r\n",
      "  inflating: /usr/share/nltk_data/corpora/wordnet/README  \r\n",
      "  inflating: /usr/share/nltk_data/corpora/wordnet/index.sense  \r\n",
      "  inflating: /usr/share/nltk_data/corpora/wordnet/data.noun  \r\n",
      "  inflating: /usr/share/nltk_data/corpora/wordnet/data.adv  \r\n",
      "  inflating: /usr/share/nltk_data/corpora/wordnet/index.noun  \r\n",
      "  inflating: /usr/share/nltk_data/corpora/wordnet/adj.exc  \r\n"
     ]
    }
   ],
   "source": [
    "# Install NLTK\n",
    "!pip list | grep nltk\n",
    "! pip install -U kaleido\n",
    "import nltk\n",
    "\n",
    "nltk.download('punkt')  \n",
    "nltk.download('wordnet')  \n",
    "\n",
    "# Unzip per this stackoverflow: https://stackoverflow.com/questions/73849624/getting-error-while-submitting-notebook-on-kaggle-even-after-importing-nltk-libr\n",
    "!unzip /usr/share/nltk_data/corpora/wordnet.zip -d /usr/share/nltk_data/corpora/"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "dc13b9d6",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-02-06T19:33:00.780600Z",
     "iopub.status.busy": "2025-02-06T19:33:00.779580Z",
     "iopub.status.idle": "2025-02-06T19:33:22.862758Z",
     "shell.execute_reply": "2025-02-06T19:33:22.861864Z"
    },
    "papermill": {
     "duration": 22.092836,
     "end_time": "2025-02-06T19:33:22.864673",
     "exception": false,
     "start_time": "2025-02-06T19:33:00.771837",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Setup\n",
    "\n",
    "import pandas as pd\n",
    "import numpy as np\n",
    "from gensim.models import Word2Vec\n",
    "from sklearn.metrics.pairwise import cosine_similarity \n",
    "from nltk.tokenize import word_tokenize\n",
    "from nltk.corpus import stopwords\n",
    "from nltk.stem import PorterStemmer, WordNetLemmatizer\n",
    "import re\n",
    "\n",
    "# Clean text \n",
    "def clean_text(text):\n",
    "    lemma = WordNetLemmatizer() # lemmatizer\n",
    "    text = re.sub(\"[^A-Za-z0-9 ]\", \"\", text)\n",
    "    text = text.lower()\n",
    "    tokens = word_tokenize(text) # look into this tokenization\n",
    "    tokens = [lemma.lemmatize(word) for word in tokens # lemmatize words and remove stopwords \n",
    "                if word not in stopwords.words(\"english\")]\n",
    "    return tokens\n",
    "\n",
    "\n",
    "# Get the sentence embeddings for each course and user input with this function\n",
    "# First get the word embeddings and average them out for the sentence (aka course/input)\n",
    "# overall embedding\n",
    "\n",
    "def get_document_embedding(doc, model):\n",
    "    embeddings = [model.wv[word] for word in doc if word in model.wv] # Get individual embeddings into a list\n",
    "    # Consider implementing exception handling \n",
    "    if len(embeddings) > 0:\n",
    "        return np.mean(embeddings, axis=0) \n",
    "    else:\n",
    "        return np.zeros(model.vector_size)\n",
    "\n",
    "# Use previous functions to process user input into vector and use cosine \n",
    "# Similarity to find the most related courses\n",
    "def recommend_courses(user_input, document_embeddings, data, top_n=5):\n",
    "    cleaned_input = clean_text(user_input)\n",
    "    input_embedding = get_document_embedding(cleaned_input, model)\n",
    "    similarities = cosine_similarity([input_embedding], document_embeddings)[0]\n",
    "    top_indices = np.argsort(similarities)[-top_n:][::-1]\n",
    "    recommendations = data.iloc[top_indices][['name', 'topic', 'link', 'provider']]\n",
    "    return recommendations\n",
    "\n",
    "        "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "e7826847",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-02-06T19:33:22.876878Z",
     "iopub.status.busy": "2025-02-06T19:33:22.876326Z",
     "iopub.status.idle": "2025-02-06T19:33:28.808284Z",
     "shell.execute_reply": "2025-02-06T19:33:28.807116Z"
    },
    "papermill": {
     "duration": 5.939944,
     "end_time": "2025-02-06T19:33:28.810157",
     "exception": false,
     "start_time": "2025-02-06T19:33:22.870213",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "                                                    name  \\\n",
      "26443                           Stock Market Foundations   \n",
      "26445  The Complete Course On Understanding Blockchai...   \n",
      "26446  Bitcoin or How I Learned to Stop Worrying and ...   \n",
      "26448  Blockchain cryptocurrency course 101 for absol...   \n",
      "26449  Trading Options For Consistent Returns: Option...   \n",
      "\n",
      "                                                   topic  \\\n",
      "26443  The Market isn't a Mystery, It’s a Playground....   \n",
      "26445  A Beginner's Guide to Authentic Knowledge on B...   \n",
      "26446  The definitive guide to understand what the bi...   \n",
      "26448  A complete guide to anyone who wants to really...   \n",
      "26449                     The Foundation For Consistency   \n",
      "\n",
      "                                                    link provider  \\\n",
      "26443  https://www.udemy.com/course/how-to-invest-in-...    Udemy   \n",
      "26445  https://www.udemy.com/course/understanding-blo...    Udemy   \n",
      "26446  https://www.udemy.com/course/bitcoin-or-how-i-...    Udemy   \n",
      "26448  https://www.udemy.com/course/blockchain-crypto...    Udemy   \n",
      "26449  https://www.udemy.com/course/trading-options-f...    Udemy   \n",
      "\n",
      "                                                    text  \n",
      "26443  Stock Market Foundations The Market isn't a My...  \n",
      "26445  The Complete Course On Understanding Blockchai...  \n",
      "26446  Bitcoin or How I Learned to Stop Worrying and ...  \n",
      "26448  Blockchain cryptocurrency course 101 for absol...  \n",
      "26449  Trading Options For Consistent Returns: Option...  \n"
     ]
    }
   ],
   "source": [
    "# Experiment with other data\n",
    "# edx, coursera, harvard, mit ocw\n",
    "# https://sparkbyexamples.com/pandas/pandas-read-multiple-csv-files/#:~:text=Load%20each%20file%20into%20individual,each%20file%20individually%20if%20needed.\n",
    "\n",
    "# Normalize/clean course data to the name, topic, link, text format for now\n",
    "\n",
    "dataMit = pd.read_csv(\"/kaggle/input/dataset-of-1200-coursera-courses/MIT ocw.csv\")\n",
    "# print(dataMit.head())\n",
    "dataMit.columns = map(str.lower, dataMit.columns)\n",
    "dataMit.rename(columns={'name ': 'name'}, inplace=True)\n",
    "dataMit.rename(columns={'course link': 'link'}, inplace=True)\n",
    "dataMit['text'] = dataMit['name'] + \" \" + dataMit['topic'] \n",
    "dataMit['provider'] = 'Massachussets Institute of Technology'\n",
    "dataMit = dataMit[['name', 'topic', 'link', 'provider', 'text']]\n",
    "\n",
    "\n",
    "dataHarvard = pd.read_csv(\"/kaggle/input/dataset-of-1200-coursera-courses/Harvard_university.csv\")\n",
    "# print(dataHarvard.head())\n",
    "dataHarvard.columns = map(str.lower, dataHarvard.columns)\n",
    "dataHarvard.rename(columns={'link to course': 'link', 'about': 'topic'}, inplace=True)\n",
    "dataHarvard = dataHarvard[dataHarvard['price'] == 'Free']\n",
    "dataHarvard['text'] = dataHarvard['name'] + \" \" + dataHarvard['topic'] \n",
    "dataHarvard['provider'] = 'Harvard University'\n",
    "dataHarvard = dataHarvard[['name', 'topic', 'link', 'provider', 'text']]\n",
    "\n",
    "\n",
    "dataEdx = pd.read_csv(\"/kaggle/input/edx-courses-dataset-2021/EdX.csv\")\n",
    "# print(dataEdx.head())\n",
    "dataEdx.columns = map(str.lower, dataEdx.columns)\n",
    "dataEdx[\"topic\"] = dataEdx['about'] + '. ' + dataEdx['course description']\n",
    "dataEdx[\"provider\"] = 'edX - ' + dataEdx['university']\n",
    "dataEdx['text'] = dataEdx['name'] + \" \" + dataEdx[\"topic\"]\n",
    "dataEdx = dataEdx[['name', 'topic', 'link', 'provider', 'text']]\n",
    "\n",
    "\n",
    "# Udemy\n",
    "dataUdemy = pd.read_csv(\"/kaggle/input/udemy-course-dataset-categories-ratings-and-trends/udemy_courses.csv\")\n",
    "dataUdemy.columns = map(str.lower, dataUdemy.columns)\n",
    "dataUdemy.rename(columns={\n",
    "    'title': 'name',\n",
    "    'headline': 'topic',\n",
    "    'url': 'link',\n",
    "}, inplace=True)\n",
    "# only keep free courses\n",
    "dataUdemy = dataUdemy[dataUdemy['is_paid'] == False]\n",
    "# Since Udemy courses are user generated, filter only courses with rating over 4.5\n",
    "dataUdemy['provider'] = 'Udemy'\n",
    "dataUdemy = dataUdemy[dataUdemy['rating'] > 4.5 ]\n",
    "dataUdemy['text'] = dataUdemy['name'] + \" \" + dataUdemy['topic']\n",
    "dataUdemy = dataUdemy[['name', 'topic', 'link', 'provider', 'text']]\n",
    "print(dataUdemy.head())\n",
    "\n",
    "\n",
    "# Coursera\n",
    "dataCoursera = pd.read_csv(\"/kaggle/input/coursera-free-courses-dataset/coursera.csv\")\n",
    "dataCoursera.rename(columns={\n",
    "    'title': 'name',\n",
    "    'skills': 'topic',\n",
    "    'url': 'link',\n",
    "}, inplace=True)\n",
    "dataCoursera = dataCoursera[dataCoursera['price'] == 'Free']\n",
    "dataCoursera['text'] = dataCoursera['name'] + \" \" + np.where(pd.notna(dataCoursera['topic']), dataCoursera['topic'], \"\")\n",
    "\n",
    "dataCoursera['provider'] = 'Coursera - ' + dataCoursera['course_by']\n",
    "dataCoursera = dataCoursera[['name', 'topic', 'link', 'provider', 'text']]\n",
    "dataCoursera = dataCoursera.fillna(\"\") # Fill null values\n",
    "\n",
    "# print(dataCoursera.head())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "b503d81e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-02-06T19:33:28.822479Z",
     "iopub.status.busy": "2025-02-06T19:33:28.822021Z",
     "iopub.status.idle": "2025-02-06T19:33:28.837690Z",
     "shell.execute_reply": "2025-02-06T19:33:28.836635Z"
    },
    "papermill": {
     "duration": 0.023965,
     "end_time": "2025-02-06T19:33:28.839540",
     "exception": false,
     "start_time": "2025-02-06T19:33:28.815575",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>name</th>\n",
       "      <th>topic</th>\n",
       "      <th>link</th>\n",
       "      <th>provider</th>\n",
       "      <th>text</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>26443</th>\n",
       "      <td>Stock Market Foundations</td>\n",
       "      <td>The Market isn't a Mystery, It’s a Playground....</td>\n",
       "      <td>https://www.udemy.com/course/how-to-invest-in-...</td>\n",
       "      <td>Udemy</td>\n",
       "      <td>Stock Market Foundations The Market isn't a My...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>26445</th>\n",
       "      <td>The Complete Course On Understanding Blockchai...</td>\n",
       "      <td>A Beginner's Guide to Authentic Knowledge on B...</td>\n",
       "      <td>https://www.udemy.com/course/understanding-blo...</td>\n",
       "      <td>Udemy</td>\n",
       "      <td>The Complete Course On Understanding Blockchai...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>26446</th>\n",
       "      <td>Bitcoin or How I Learned to Stop Worrying and ...</td>\n",
       "      <td>The definitive guide to understand what the bi...</td>\n",
       "      <td>https://www.udemy.com/course/bitcoin-or-how-i-...</td>\n",
       "      <td>Udemy</td>\n",
       "      <td>Bitcoin or How I Learned to Stop Worrying and ...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>26448</th>\n",
       "      <td>Blockchain cryptocurrency course 101 for absol...</td>\n",
       "      <td>A complete guide to anyone who wants to really...</td>\n",
       "      <td>https://www.udemy.com/course/blockchain-crypto...</td>\n",
       "      <td>Udemy</td>\n",
       "      <td>Blockchain cryptocurrency course 101 for absol...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>26449</th>\n",
       "      <td>Trading Options For Consistent Returns: Option...</td>\n",
       "      <td>The Foundation For Consistency</td>\n",
       "      <td>https://www.udemy.com/course/trading-options-f...</td>\n",
       "      <td>Udemy</td>\n",
       "      <td>Trading Options For Consistent Returns: Option...</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                                    name  \\\n",
       "26443                           Stock Market Foundations   \n",
       "26445  The Complete Course On Understanding Blockchai...   \n",
       "26446  Bitcoin or How I Learned to Stop Worrying and ...   \n",
       "26448  Blockchain cryptocurrency course 101 for absol...   \n",
       "26449  Trading Options For Consistent Returns: Option...   \n",
       "\n",
       "                                                   topic  \\\n",
       "26443  The Market isn't a Mystery, It’s a Playground....   \n",
       "26445  A Beginner's Guide to Authentic Knowledge on B...   \n",
       "26446  The definitive guide to understand what the bi...   \n",
       "26448  A complete guide to anyone who wants to really...   \n",
       "26449                     The Foundation For Consistency   \n",
       "\n",
       "                                                    link provider  \\\n",
       "26443  https://www.udemy.com/course/how-to-invest-in-...    Udemy   \n",
       "26445  https://www.udemy.com/course/understanding-blo...    Udemy   \n",
       "26446  https://www.udemy.com/course/bitcoin-or-how-i-...    Udemy   \n",
       "26448  https://www.udemy.com/course/blockchain-crypto...    Udemy   \n",
       "26449  https://www.udemy.com/course/trading-options-f...    Udemy   \n",
       "\n",
       "                                                    text  \n",
       "26443  Stock Market Foundations The Market isn't a My...  \n",
       "26445  The Complete Course On Understanding Blockchai...  \n",
       "26446  Bitcoin or How I Learned to Stop Worrying and ...  \n",
       "26448  Blockchain cryptocurrency course 101 for absol...  \n",
       "26449  Trading Options For Consistent Returns: Option...  "
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Create a Combined Dataframe\n",
    "data = pd.concat([dataUdemy, dataMit, dataHarvard, dataEdx, dataCoursera])\n",
    "data.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "d7319b41",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-02-06T19:33:28.852356Z",
     "iopub.status.busy": "2025-02-06T19:33:28.851785Z",
     "iopub.status.idle": "2025-02-06T19:34:01.086257Z",
     "shell.execute_reply": "2025-02-06T19:34:01.084928Z"
    },
    "papermill": {
     "duration": 32.247318,
     "end_time": "2025-02-06T19:34:01.092567",
     "exception": false,
     "start_time": "2025-02-06T19:33:28.845249",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "26443    [stock, market, foundation, market, isnt, myst...\n",
       "26445    [complete, course, understanding, blockchain, ...\n",
       "26446    [bitcoin, learned, stop, worrying, love, crypt...\n",
       "26448    [blockchain, cryptocurrency, course, 101, abso...\n",
       "26449    [trading, option, consistent, return, option, ...\n",
       "Name: cleaned_text, dtype: object"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# The list of tokenized sentences, ie our Corpus \n",
    "data['cleaned_text'] = data['text'].apply(clean_text) # Add clean text column to dataframe\n",
    "data['cleaned_text'].head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "abd35bd0",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-02-06T19:34:01.106065Z",
     "iopub.status.busy": "2025-02-06T19:34:01.105673Z",
     "iopub.status.idle": "2025-02-06T19:34:02.445411Z",
     "shell.execute_reply": "2025-02-06T19:34:02.444304Z"
    },
    "papermill": {
     "duration": 1.348386,
     "end_time": "2025-02-06T19:34:02.447397",
     "exception": false,
     "start_time": "2025-02-06T19:34:01.099011",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "['stock', 'market', 'foundation', 'market', 'isnt', 'mystery', 'playgroundlearn', 'rule', 'learn', 'play']\n"
     ]
    }
   ],
   "source": [
    "# Corpus = list of tokenized sentences (already cleaned)\n",
    "corpus = data['cleaned_text'].tolist()\n",
    "print(corpus[0])\n",
    "\n",
    "# Train Word2Vec\n",
    "model = Word2Vec(\n",
    "    sentences=corpus,\n",
    "    vector_size=80,\n",
    "    window=5,       # Larger window for broader context\n",
    "    min_count=8,    # Ignore very rare words\n",
    "    workers=4,\n",
    "    epochs=10\n",
    ")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "2f72bd90",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-02-06T19:34:02.460427Z",
     "iopub.status.busy": "2025-02-06T19:34:02.459982Z",
     "iopub.status.idle": "2025-02-06T19:34:02.882399Z",
     "shell.execute_reply": "2025-02-06T19:34:02.880541Z"
    },
    "papermill": {
     "duration": 0.431132,
     "end_time": "2025-02-06T19:34:02.884375",
     "exception": false,
     "start_time": "2025-02-06T19:34:02.453243",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "list of sentence vectors/sentences: 5989\n",
      "each sentence has (80,) dimensions\n"
     ]
    }
   ],
   "source": [
    "# Get a list of the document embedding vector for each sentence in the cleaned text data. The indices will be aligned with the original course rows in dataframe\n",
    "document_embeddings = [get_document_embedding(doc, model)\n",
    "                      for doc in data['cleaned_text']]\n",
    "print(f'list of sentence vectors/sentences: {len(document_embeddings)}')\n",
    "print(f'each sentence has {document_embeddings[0].shape} dimensions')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "7d21b89c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-02-06T19:34:02.899683Z",
     "iopub.status.busy": "2025-02-06T19:34:02.899299Z",
     "iopub.status.idle": "2025-02-06T19:34:02.942745Z",
     "shell.execute_reply": "2025-02-06T19:34:02.941117Z"
    },
    "papermill": {
     "duration": 0.054459,
     "end_time": "2025-02-06T19:34:02.944907",
     "exception": false,
     "start_time": "2025-02-06T19:34:02.890448",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>name</th>\n",
       "      <th>topic</th>\n",
       "      <th>link</th>\n",
       "      <th>provider</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>987</th>\n",
       "      <td>eHealth: More than just an electronic record</td>\n",
       "      <td></td>\n",
       "      <td>https://www.coursera.org/learn/ehealth</td>\n",
       "      <td>Coursera - The University of Sydney</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>347</th>\n",
       "      <td>Godzilla and the Bullet Train: Technology and ...</td>\n",
       "      <td>Media Studies, Fine Arts, Society</td>\n",
       "      <td>https://ocw.mit.edu/courses/sts-s28-godzilla-a...</td>\n",
       "      <td>Massachussets Institute of Technology</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>338</th>\n",
       "      <td>Biomolecular Feedback Systems</td>\n",
       "      <td>Engineering, Science, Mechanical Engineering</td>\n",
       "      <td>https://ocw.mit.edu/courses/2-18-biomolecular-...</td>\n",
       "      <td>Massachussets Institute of Technology</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>339</th>\n",
       "      <td>American Popular Music</td>\n",
       "      <td>Music, Fine Arts, Music History</td>\n",
       "      <td>https://ocw.mit.edu/courses/21m-295-american-p...</td>\n",
       "      <td>Massachussets Institute of Technology</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>340</th>\n",
       "      <td>Victorian Literature and Culture</td>\n",
       "      <td>Humanities, Literature, History</td>\n",
       "      <td>https://ocw.mit.edu/courses/21l-481-victorian-...</td>\n",
       "      <td>Massachussets Institute of Technology</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                                  name  \\\n",
       "987       eHealth: More than just an electronic record   \n",
       "347  Godzilla and the Bullet Train: Technology and ...   \n",
       "338                      Biomolecular Feedback Systems   \n",
       "339                             American Popular Music   \n",
       "340                   Victorian Literature and Culture   \n",
       "\n",
       "                                            topic  \\\n",
       "987                                                 \n",
       "347             Media Studies, Fine Arts, Society   \n",
       "338  Engineering, Science, Mechanical Engineering   \n",
       "339               Music, Fine Arts, Music History   \n",
       "340               Humanities, Literature, History   \n",
       "\n",
       "                                                  link  \\\n",
       "987             https://www.coursera.org/learn/ehealth   \n",
       "347  https://ocw.mit.edu/courses/sts-s28-godzilla-a...   \n",
       "338  https://ocw.mit.edu/courses/2-18-biomolecular-...   \n",
       "339  https://ocw.mit.edu/courses/21m-295-american-p...   \n",
       "340  https://ocw.mit.edu/courses/21l-481-victorian-...   \n",
       "\n",
       "                                  provider  \n",
       "987    Coursera - The University of Sydney  \n",
       "347  Massachussets Institute of Technology  \n",
       "338  Massachussets Institute of Technology  \n",
       "339  Massachussets Institute of Technology  \n",
       "340  Massachussets Institute of Technology  "
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# User interface (abstracted away)\n",
    "user_input = \"Lagrange Multipliers\"\n",
    "recommendations = recommend_courses(user_input, document_embeddings, data)\n",
    "recommendations.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "0c8654df",
   "metadata": {
    "papermill": {
     "duration": 0.006742,
     "end_time": "2025-02-06T19:34:02.959034",
     "exception": false,
     "start_time": "2025-02-06T19:34:02.952292",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Important Notes\n",
    "\n",
    "* Original Source: https://www.kaggle.com/code/shtrausslearning/nlp-edx-course-recommendations\n",
    "* DeepSeek AI for original base which also calls the document embeddings for the input\n",
    "* I have added comments to better study and understand the code as a base to build off of\n",
    "* Instead of directly matching to a course index in the dataset which limits the use of the model\n",
    "\n",
    "# Todo (to better understand and be able to present on this topic)\n",
    "\n",
    "* Study cosine similarity\\\n",
    "* Word2Vec and stopwords/lemmatization\n",
    "* Coursera, futurelearn, udemy\n",
    "* Build a frontend for the app\n",
    "\n",
    "# Improvements\n",
    "\n",
    "reshaped corpus as list instead of series, increased context window, "
   ]
  }
 ],
 "metadata": {
  "kaggle": {
   "accelerator": "none",
   "dataSources": [
    {
     "datasetId": 1868643,
     "sourceId": 3051937,
     "sourceType": "datasetVersion"
    },
    {
     "datasetId": 2423448,
     "sourceId": 5103339,
     "sourceType": "datasetVersion"
    },
    {
     "datasetId": 5456599,
     "sourceId": 9279572,
     "sourceType": "datasetVersion"
    },
    {
     "datasetId": 6138541,
     "sourceId": 9976645,
     "sourceType": "datasetVersion"
    }
   ],
   "dockerImageVersionId": 30839,
   "isGpuEnabled": false,
   "isInternetEnabled": true,
   "language": "python",
   "sourceType": "notebook"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.12"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 83.749992,
   "end_time": "2025-02-06T19:34:05.693307",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2025-02-06T19:32:41.943315",
   "version": "2.6.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
